version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6-stretch
    working_directory: /home/circleci/tskit
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci *
      - restore_cache:
          key: tskit-{{ .Branch }}
      - run:
          name: Checkout submodules
          command: |
            git submodule update --init --recursive --remote
      - run:
          name: Install dependencies and set path
          command: |
            sudo apt-get install ninja-build libcunit1-dev valgrind clang doxygen libgsl-dev
            pip install --user -r python/requirements/development.txt
            pip install meson --user
            # tmp; until we have an msprime package install from here.
            # 0.1.0 is broken, so force 0.1.0a1 for now.
            pip install --user --pre tskit==0.1.0a1
            pip install --user git+https://github.com/tskit-dev/msprime
            echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV
      - save_cache:
          key: tskit-{{ .Branch }}
          paths:
            - "/home/circleci/.local"

      - run:
          name: Compile Python
          command: |
            cd python 
            # CFLAGS="--coverage -Wall -Wextra -Werror -Wno-unused-parameter" \
            #   python setup.py build_ext --inplace
            # TODO enable these flags later.
            CFLAGS="--coverage" python setup.py build_ext --inplace

      - run:
          name: Lint Python
          command: |
            cd python
            flake8 --max-line-length 89 tskit setup.py tests

      - run:
          name: Run Python tests 
          command: |
            PYTHONPATH=python nosetests -v --with-coverage --cover-package tskit \
              --cover-branches --cover-erase --cover-xml \
              --cover-inclusive python/tests
            python3 -m codecov -F python

      - run:
          name: Build Python package
          command: |
            cd python
            rm -fR build
            python setup.py sdist
            python setup.py check
            python -m venv venv
            source venv/bin/activate 
            pip install --upgrade setuptools pip wheel
            python setup.py build_ext
            python setup.py egg_info
            python setup.py bdist_wheel
            pip install dist/*.tar.gz 

      - run:
          name: Compile C
          command: |
            CFLAGS=--coverage meson c/ build-gcc && cd build-gcc && ninja

      - run:
          name: Run C tests
          command: |
            ./build-gcc/test_core
            ./build-gcc/test_tables
            ./build-gcc/test_trees
            ./build-gcc/test_genotypes
            ./build-gcc/test_convert

      - run:
          name: Run gcov & upload coverage.
          command: |
            gcov -pb -o ./python/build/temp.linux*/ python/_tskitmodule.c
            gcov -pb ./build-gcc/tskit@sta/tsk_*.gcno
            codecov -X gcov -F C

      - run:
          name: Valgrind for C tests.
          command: |
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_core
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_tables
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_trees
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_genotypes
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/test_convert

      - run:
          name: Compile C tests under clang
          command: |
            CC=clang meson c/ build-clang && cd build-clang && ninja

      - run:
          name: Run clang-compiled C tests
          command: |
            ./build-clang/test_core
            ./build-clang/test_tables
            ./build-clang/test_trees
            ./build-clang/test_genotypes
            ./build-clang/test_convert

      - run:
          name: Build docs
          command: |
            cd docs && make
